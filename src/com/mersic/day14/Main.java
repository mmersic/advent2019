package com.mersic.day14;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main {

    public static boolean debug = false;

    //ex1 = 31
    //ex2 = 165
    //ex3 = 13312
    //ex4 = 180697
    //ex5 = 2210736
    //part1 = 202617
    //part2 = 7863863 fuel from 1^12 ore.
    public static void main(String args[]) throws Exception {
        FileReader fr = new FileReader(args[0]);
        BufferedReader br = new BufferedReader(fr);

        Map<String, Reactant> outputReactantMap = new HashMap<>();
        Map<Reactant, List<Reactant>> formula = new HashMap<>();

        String inputString = null;

        while ((inputString = br.readLine()) != null) {
            String s[] = inputString.split("=>");
            String[] inputs = s[0].split(",");
            List<Reactant> reactantList = new ArrayList<>();
            for (String i : inputs) {
                i = i.trim();
                String[] parts = i.split(" ");
                reactantList.add(new Reactant(parts[1], Integer.parseInt(parts[0])));
            }

            String output = s[1].trim();
            String[] parts = output.split(" ");
            Reactant outputReactant = new Reactant(parts[1], Integer.parseInt(parts[0]));
            formula.put(outputReactant, reactantList);
            outputReactantMap.put(outputReactant.name, outputReactant);
        }


        long oreRequired = determineOreRequired("FUEL", 1, outputReactantMap, formula, new HashMap<>(), new HashMap<>());
        System.out.println("part_one: one fuel requires: " + oreRequired + " ore");

        long target = 1000000000000l;
        int under = (int) (target / oreRequired);
        int over = under*2;
        int guess = -1;
        while (true) {
            guess = (over-under)/2 + under;
            oreRequired = determineOreRequired("FUEL", guess, outputReactantMap, formula, new HashMap<>(), new HashMap<>());
            if (oreRequired > target) {
                //between under and guess
                if (Math.abs(under-guess) == 1) {
                    guess = under;
                    break;
                } else {
                    over = guess;
                }
            } else if (oreRequired < target) {
                //between guess and over
                if (Math.abs(over-guess) == 1) {
                    if (determineOreRequired("FUEL", over, outputReactantMap, formula, new HashMap<>(), new HashMap<>()) < target) {
                        guess = over;
                    }
                    break;
                } else {
                    under = guess;
                }
            }
        }

        System.out.println("part_two: fuel generated by " + target + " ore: " + guess);
    }

    private static void resolveExpression(Reactant inputReactant, long inputNeeded, Map<String, Reactant> outputReactantMap, Map<Reactant, List<Reactant>> formula, Map<String, Long> consumed, Map<String, Long> available) {
        Reactant outputReactant = outputReactantMap.get(inputReactant.name);
        List<Reactant> inputReactants = formula.get(outputReactant);

        long availInput = available.containsKey(inputReactant.name) ? available.get(inputReactant.name) : 0;
        if (availInput <= inputNeeded) {
            available.put(inputReactant.name, 0l);
            inputNeeded -= availInput;
        } else {
            available.put(inputReactant.name, availInput-inputNeeded);
            inputNeeded = 0;
        }

        if (inputNeeded == 0) {
            if (debug) System.out.println("zero input needed...");
            return;
        } else {
            if (debug) System.out.println("need: " + inputNeeded + " of " + inputReactant.name);
        }

        long reactionsNeeded = inputNeeded / outputReactant.quantity;
        if (inputNeeded % outputReactant.quantity != 0) {
            reactionsNeeded++;
            long remainingInput = available.containsKey(outputReactant.name) ? available.get(outputReactant.name) : 0;
            if (remainingInput > 0) {
                throw new RuntimeException("Should be zero available here.");
            }
            remainingInput = outputReactant.quantity - (inputNeeded % outputReactant.quantity);
            available.put(outputReactant.name, remainingInput);
        }

        for (Reactant ir : inputReactants) {
            if (!"ORE".equals(ir.name)) {
                resolveExpression(ir, reactionsNeeded * ir.quantity, outputReactantMap, formula, consumed, available);
            } else {
                long consumed_ore = consumed.containsKey("ORE") ? consumed.get("ORE") : 0;
                consumed.put("ORE", consumed_ore+(ir.quantity*reactionsNeeded));
            }
        }
    }

    private static long determineOreRequired(String output_name, int qty, Map<String, Reactant> outputReactantMap, Map<Reactant, List<Reactant>> formula, Map<String, Long> consumed, Map<String, Long> available) {

        Reactant outputReactant = outputReactantMap.get(output_name);
        List<Reactant> inputReactants = formula.get(outputReactant);
        for (Reactant inputReactant : inputReactants) {
            resolveExpression(inputReactant, qty*inputReactant.quantity, outputReactantMap, formula, consumed, available);
        }

        if (debug) System.out.println("ore_needed: " + consumed.get("ORE"));

        return consumed.get("ORE");
    }
}